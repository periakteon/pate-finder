// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  hash            String
  salt            String
  profile_picture String?
  phone           String?
  city            String?
  country         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  followedBy Follow[] @relation("following")
  following  Follow[] @relation("follower")

  pet      Pet?
  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model Pet {
  id        Int       @id @default(autoincrement())
  name      String
  breed     String
  birthdate DateTime?
  pet_photo String?
  type      String
  bio       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Post {
  id        Int      @id @default(autoincrement())
  caption   String
  postImage String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int // Kullanıcının kimlik numarasını tutar

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@unique([followerId, followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([postId, userId])
}
